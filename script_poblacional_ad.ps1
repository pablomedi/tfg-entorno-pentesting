$Global:Nombres=@('Alberto', 'Luis', 'Aron', 'Gonzalo', 'Sara', 'Eli', 'Sofia', 'Wiston', 'Francisco', 'Alex', 'Taylor', 'Lucas', 'Eduardo', 'Michael', 'Norma', 'Jawy', 'Mane', 'Karime', 'Fernando', 'Electra', 'Scarlet', 'Jennifer');
$Global:Apellidos=('Rodriguez', 'Martinez', 'Ronaldo', 'Ramos', 'Garcia', 'Eastwood', 'Coppola', 'Scorsesse', 'Tarantino', 'Douglas', 'Jones', 'Smith', 'Skywalker', 'Snow', 'Spencer', 'Fernandez', 'Willis', 'Wayne', 'Gates', 'Buffet', 'Soros', 'Ford');
$Global:Contras=@('12345678', 'hola', '11111', 'Password', 'iloveyou', 'qwerty', 'pass', 'admin', 'root', 'february', 'abc123', 'usuario', 'kali', 'asdf', '987654', 'Batman', 'BmwMercedes', 'Orange', '6666', 'xxxxxx', 'gucci', 'password123');
$Global:Grupos=@('Socios', 'Directores', 'Socios Equity', 'CEO', 'Juniors', 'Seniors', 'Managment', 'IT', 'Secretarios', 'Ventas', 'Marketing');
#$Global:Permisos=@('GenericAll', 'GenericWrite', 'WriteOwner', 'WriteDACL', 'Self', 'WriteProperty');
$Global:Servicios = @('mssql_svc,mssqlserver','http_svc,httpserver','exchange_svc,exserver');
$Global:UsuariosCreados=@();
$Global:UsuariosAgregados=@();
$Global:Todos=@();
$Global:Dominio= "DOMINIO.TFG";

function AddADUser {
    Param(
        [int]$limit = 40
    )
    Set-ADDefaultDomainPasswordPolicy -Identity $Global:Dominio -ComplexityEnabled $false -ReversibleEncryptionEnabled $False -MinPasswordLength 4
    Add-Type -AssemblyName System.Web
    for ($i=1; $i -le $limit; $i=$i+1 ) {
        $nombre = ($Global:Nombres | Get-Random);
        $apellido = ($Global:Apellidos | Get-Random);
        $nombrecompleto = "{0} {1}" -f ($nombre , $apellido);
        $SamAccountName = ("{0}.{1}" -f ($nombre, $apellido)).ToLower();
        $principalname = "{0}.{1}" -f ($nombre, $apellido);
        $generated_password = ([System.Web.Security.Membership]::GeneratePassword(12,2))
	Try { New-ADUser -Name "$nombre $apellido" -DisplayName "$nombre $apellido" -GivenName $nombre -Surname $apellido -SamAccountName $SamAccountName -UserPrincipalName $SamAccountName@$Global:Dominio -AccountPassword (ConvertTo-SecureString $generated_password -AsPlainText -Force) -PassThru | Enable-ADAccount } Catch {echo "error creacion usuario"}
        $Global:UsuariosCreados += $SamAccountName;
    }
    for ($i=1; $i -le (Get-Random -Minimum 1 -Maximum 10); $i=$i+1 ) {
        $randomuser = ($Global:UsuariosCreados | Get-Random)
        $password = ([System.Web.Security.Membership]::GeneratePassword(12,2))
        Set-AdAccountPassword -Identity $randomuser -Reset -NewPassword (ConvertTo-SecureString $password -AsPlainText -Force)
        Set-ADUser $randomuser -Description "La clave es $password"
    }
    for ($i=1; $i -le (Get-Random -Minimum 1 -Maximum 10); $i=$i+1 ) {
        $randomuser = ($Global:UsuariosCreados | Get-Random)
        $password = "Default"
        Set-AdAccountPassword -Identity $randomuser -Reset -NewPassword (ConvertTo-SecureString $password -AsPlainText -Force)
        Set-AdUser $randomuser -ChangePasswordAtLogon $true
    }

    for ($i=1; $i -le (Get-Random -Minimum 1 -Maximum 10); $i=$i+1 ) {
        $randomuser = ($Global:UsuariosCreados | Get-Random)
        Set-AdUser $randomuser -PasswordNotRequired $true
    }
}

function AddADGrupo{
    foreach ($grupo in $Global:Grupos){
        Try {NEW-ADGroup -Name "$grupo" -Description "Es el grupo $grupo" -Groupscope Global} Catch{echo "error"}
        if ($grupo -eq "CEO"){
            $randomuser = ($Global:UsuariosCreados | Get-Random)
	        while (($Global:UsuariosAgregados -contains $randomuser) -and ($Global:UsuariosAgregados.count -ne $Global:UsuariosCreados.count)){
		        $randomuser = ($Global:UsuariosCreados | Get-Random)
	        }
            Try {Add-ADGroupMember -Identity "$grupo" -Members "$randomuser"} Catch{echo "error creacion grupo"}
            $Global:UsuariosAgregados += $randomuser
        }else{
            for ($i=1; $i-le (Get-Random -Minimum 1 -Maximum 9); $i=$i+1){
                $randomuser = ($Global:UsuariosCreados | Get-Random)
                while (($Global:UsuariosAgregados -contains $randomuser) -and ($Global:UsuariosAgregados.count -ne $Global:UsuariosCreados.count)){
			        $randomuser = ($Global:UsuariosCreados | Get-Random)
	    	    }
		        Try {Add-ADGroupMember -Identity "$grupo" -Members "$randomuser"} Catch{echo "error agregar usuario"}
                $Global:UsuariosAgregados += $randomuser
            }
        }
        $Global:Todos +=$grupo;
    }
    $random= ($Global:Grupos|Get-Random)
    Add-ADGroupMember -Identity "DnsAdmins" -Members $random
    for ($i=1; $i-le (Get-Random -Minimum 1 -Maximum 9); $i=$i+1){
        $randomusuario = ($Global:UsuariosCreados | Get-Random)
        Add-ADGroupMember -Identity "DnsAdmins" -Members $randomusuario
    }
}

function Kerberos {
    $servicio = ($Global:Servicios | Get-Random)
    $nombre = $servicio.split(',')[0];
    $servicio_principal = $servicio.split(',')[1];
    $password = ($Global:Contras | Get-Random);
    Try { New-ADServiceAccount -Name $nombre -ServicePrincipalNames "$nombre/$servicio_principal.$Global:Dominio" -AccountPassword (ConvertTo-SecureString $password -AsPlainText -Force) -RestrictToSingleComputer -PassThru } Catch {}
    foreach ($sv in $Global:Servicios) {
        if ($servicio_principal -ne $sv) {
            $nombre2 = $sv.split(',')[0];
            $servicio_principal2 = $sv.split(',')[1];
            $password = ([System.Web.Security.Membership]::GeneratePassword(12,2))
            Try { New-ADServiceAccount -Name $nombre2 -ServicePrincipalNames "$nombre2/$servicio_principal2.$Global:Dominio" -RestrictToSingleComputer -AccountPassword (ConvertTo-SecureString $password -AsPlainText -Force) -PassThru } Catch {}

        }
    }
}

function Asrep {
    for ($i=1; $i -le (Get-Random -Minimum 1 -Maximum 3); $i=$i+1 ) {
        $randomuser = ($Global:UsuariosCreados | Get-Random)
        $password = ($Global:Contras|Get-Random);
        Set-AdAccountPassword -Identity $randomuser -Reset -NewPassword (ConvertTo-SecureString $password -AsPlainText -Force)
        Set-ADAccountControl -Identity $randomuser -DoesNotRequirePreAuth 1
    }
}

function SMBSigning {
    Set-SmbClientConfiguration -RequireSecuritySignature 0 -EnableSecuritySignature 0 -Confirm -Force
}
