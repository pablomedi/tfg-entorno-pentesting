#Script que instala git y docker y carga la vulnerabilidad log4shell al servidor
data "template_file" "install_script_server_web" {
  template = file("install_server.sh") 
}

#Script que instala docker con mysql
data "template_file" "install_script_server_db" {
  template = file("install_server_db.sh") 
}


#Creacion de una Ubuntu server, donde se instala giy y docker para desplegar
#un web con la vulnerabilidad log4shell
resource "azurerm_linux_virtual_machine" "servidor_web" {
  name                  = "${var.prefix}-servidor-web"
  location              = azurerm_resource_group.resource_gp.location
  resource_group_name   = azurerm_resource_group.resource_gp.name
  network_interface_ids = [azurerm_network_interface.interfaz_servidor_web.id]
  size               = "Standard_DS1_v2"
  admin_username      = "${var.admin_username}"
  admin_password = "${var.admin_password}"
  disable_password_authentication = false
  custom_data    = filebase64("install_server.sh")
  
  os_disk {
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
  }

  source_image_reference {
    publisher = "Canonical"
    offer     = "UbuntuServer"
    sku       = "16.04-LTS"
    version   = "latest"
  } 
}

#Creacion de una Ubuntu server, donde se instala docker para desplegar
#mysql con una base de datos poblada
resource "azurerm_linux_virtual_machine" "servidor_db" {
  name                  = "${var.prefix}-servidor-db"
  location              = azurerm_resource_group.resource_gp.location
  resource_group_name   = azurerm_resource_group.resource_gp.name
  network_interface_ids = [azurerm_network_interface.interfaz_servidor_db.id]
  size               = "Standard_DS1_v2"
  admin_username      = "${var.admin_username}"
  admin_password = "${var.admin_password}"
  disable_password_authentication = false
  custom_data    = filebase64("install_server_db.sh")
  
  os_disk {
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
  }

  source_image_reference {
    publisher = "Canonical"
    offer     = "UbuntuServer"
    sku       = "16.04-LTS"
    version   = "latest"
  } 
}

#Creacion de una maquina con las siguientes herramientas
#metasploit-framework, nmap, john the ripper, sqlmap
resource "azurerm_linux_virtual_machine" "kali" {
  name                  = "${var.prefix}-kali"
  location              = azurerm_resource_group.resource_gp.location
  resource_group_name   = azurerm_resource_group.resource_gp.name
  network_interface_ids = [azurerm_network_interface.interfaz_kali.id]
  size               = "Standard_DS1_v2"
  admin_username      = "${var.admin_username}"
  admin_password = "${var.admin_password}"
  disable_password_authentication = false
  custom_data    = filebase64("install_kali.sh")
  
  os_disk {
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
  }

  source_image_reference {
    publisher = "Canonical"
    offer     = "UbuntuServer"
    sku       = "16.04-LTS"
    version   = "latest"
  } 
}

#Ordenador pruebas
resource "azurerm_linux_virtual_machine" "servidor" {
  name                  = "${var.prefix}-servidor"
  location              = azurerm_resource_group.resource_gp.location
  resource_group_name   = azurerm_resource_group.resource_gp.name
  network_interface_ids = [azurerm_network_interface.interfaz_servidor.id]
  size               = "Standard_DS1_v2"
  admin_username      = "${var.admin_username}"
  admin_password = "${var.admin_password}"
  disable_password_authentication = false
  
  os_disk {
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
  }

  source_image_reference {
    publisher = "Canonical"
    offer     = "UbuntuServer"
    sku       = "16.04-LTS"
    version   = "latest"
  } 
}
